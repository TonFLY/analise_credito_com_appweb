name: 🚀 Deploy Análise de Crédito para Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: 🧪 Testes Automatizados
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Configurar Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: 📦 Cache dependências
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: ⚙️ Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8
    
    - name: 🔍 Lint com flake8
      run: |
        # Para por se houver erros de sintaxe ou nomes indefinidos
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Avisos tratados como avisos
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🤖 Treinar modelo mock
      run: |
        python model_mock.py
    
    - name: 🧪 Executar testes
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: 🔌 Testar API
      run: |
        python test_prediction.py

  build-and-deploy:
    name: 🐳 Build e Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🔐 Login Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: 🐳 Login Docker Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: 🏗️ Build e Push Docker Image
      run: |
        docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/analise-credito:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/analise-credito:${{ github.sha }}
        docker tag ${{ secrets.REGISTRY_LOGIN_SERVER }}/analise-credito:${{ github.sha }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/analise-credito:latest
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/analise-credito:latest
    
    - name: 🚀 Deploy para Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ secrets.RESOURCE_GROUP }}
        dns-name-label: analise-credito-${{ github.run_number }}
        image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/analise-credito:latest
        registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        registry-username: ${{ secrets.REGISTRY_USERNAME }}
        registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        name: analise-credito-container
        ports: '5000 8501'
        cpu: 2
        memory: 4
    
    - name: ✅ Deploy concluído
      run: |
        echo "🎉 Deploy realizado com sucesso!"
        echo "🏦 Aplicação: http://analise-credito-${{ github.run_number }}.brazilsouth.azurecontainer.io:8501"
        echo "🔌 API: http://analise-credito-${{ github.run_number }}.brazilsouth.azurecontainer.io:5000/health"

  security-scan:
    name: 🔒 Verificação de Segurança
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: 🔍 Scan de segurança com bandit
      run: |
        pip install bandit
        bandit -r . -f json -o security-report.json || true
    
    - name: 📊 Upload relatório de segurança
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json

  performance-test:
    name: 🚀 Teste de Performance
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: ⚙️ Instalar dependências
      run: |
        pip install -r requirements.txt
        pip install locust
    
    - name: 🤖 Preparar ambiente
      run: |
        python model_mock.py
        python api_mock.py &
        sleep 10
    
    - name: 🏃 Teste de carga
      run: |
        locust --headless --users 10 --spawn-rate 2 --run-time 60s --host http://localhost:5000 -f tests/locustfile.py || true
