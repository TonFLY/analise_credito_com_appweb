version: '3.8'

services:
  # Serviço da API (usando api_mock.py que funciona)
  api:
    build: .
    ports:
      - "5000:5000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=5000
      - API_DEBUG=false
      - FLASK_ENV=production
    volumes:
      - ./objects:/app/objects
      - ./logs:/app/logs
    networks:
      - credit_network
    restart: unless-stopped
    command: python api_mock.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Serviço do Streamlit
  streamlit:
    build: .
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_PORT=8501
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    volumes:
      - ./logs:/app/logs
    depends_on:
      api:
        condition: service_healthy
    networks:
      - credit_network
    restart: unless-stopped
    command: streamlit run webapp.py --server.address=0.0.0.0 --server.port=8501 --server.headless=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dashboard
  dashboard:
    build: .
    ports:
      - "8502:8502"
    environment:
      - STREAMLIT_SERVER_PORT=8502
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    volumes:
      - ./logs:/app/logs
    depends_on:
      api:
        condition: service_healthy
    networks:
      - credit_network
    restart: unless-stopped
    command: streamlit run dashboard.py --server.address=0.0.0.0 --server.port=8502 --server.headless=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8502"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL (opcional - comentado pois usamos dados sintéticos)
  # db:
  #   image: postgres:15
  #   environment:
  #     POSTGRES_DB: novadrivebank
  #     POSTGRES_USER: etlreadonlybank
  #     POSTGRES_PASSWORD: novadrive376A@
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - credit_network
  #   restart: unless-stopped

  # Nginx Load Balancer (opcional - comentado para simplificar)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - api
  #     - streamlit
  #   networks:
  #     - credit_network
  #   restart: unless-stopped

networks:
  credit_network:
    driver: bridge

volumes:
  # postgres_data:  # Comentado pois não usamos PostgreSQL no momento
